version: '3.8'

services:
  # PostgreSQL 데이터베이스 (관리형 DB 사용 권장)
  postgres:
    image: postgres:15
    container_name: insurance_postgres_prod
    env_file:
      - env.prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/utils/sql/init_database.sql:/docker-entrypoint-initdb.d/01-schema.sql
    restart: unless-stopped
    networks:
      - insurance_network
    # 프로덕션에서는 포트 노출하지 않음
    # ports:
    #   - "5432:5432"

  # 백엔드 API (FastAPI) - 프로덕션 설정
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: insurance_backend_prod
    env_file:
      - env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME}
      - PROMETHEUS_METRICS_ENABLED=${PROMETHEUS_METRICS_ENABLED}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FILE=${LOG_FILE}
    volumes:
      - ./uploads:/app/uploads  # 로컬 파일 저장 지원
      - ./tmp:/app/tmp
      - ./80bfb172efe0f64e9ff0e750033f49cdcfa0904f.json:/app/80bfb172efe0f64e9ff0e750033f49cdcfa0904f.json  # GCS 서비스 계정 키 파일
      # 프로덕션에서는 소스코드 볼륨 마운트 제거
      # - ./backend:/app
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - insurance_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    # 프로덕션에서는 Nginx를 통해서만 접근
    # ports:
    #   - "8000:8000"

  # Nginx (리버스 프록시) - 프로덕션 설정
  nginx:
    image: nginx:alpine
    container_name: insurance_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - insurance_network

  # Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - insurance_network

  # Grafana (시각화)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_prod
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    networks:
      - insurance_network

  # Jaeger (트레이싱)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger_prod
    ports:
      - "16686:16686"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - insurance_network

  # cAdvisor (컨테이너 리소스 모니터링)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor_prod
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: always
    networks:
      - insurance_network

volumes:
  postgres_data:
  grafana_data:

networks:
  insurance_network:
    driver: bridge 